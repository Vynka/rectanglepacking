*****************************************************************

* ARCHIVO TODO PARA TENER SEGUIMIENTO DE LOS CAMBIOS POR HACER. *
*****************************************************************
* Estilo:                                             			*
* - TODO en si. [Quien ha puesto la nota]                       *
* ? Sugerencia. [Quien ha puesto la nota]                       *
* Si se resuelve el TODO poner en la segunda seccion una nota   *
* de lo resuelto y el nombre de quien la resolvio.              *
* Asi si tenemos que contactar a alguien por algun problema     *
* sera mas llevadero.                                           *
* NO PONGAN TILDES. La codificacion difiere segun SO y 			*
* genera caracteres ilegibles									*
*																*
*  VERSION: XX.YY.ZZ										    *
*		XX =  Remodelacion completa. No creo que se cambie      *
*		YY =  Numero de heuristicas difetentes.					* 
*				(GRASP, Entorno...) 						    *
*		ZZ =  Subtipos de Heuristicas (Busqueda local, BAP...)	*
*															    *
*****************************************************************



- Realizar un entorno de ventanas para poder hacer un testeo y depuracion de lo implemetado.
  Lo haria yo pero tardaria demasiado en aprender a hacerlo XD Aun asi me pondre con ello
  por si acaso. [Ale]


	
- Ampliar la Wiki [Haside]
    ? Utilizar la wiki de googlecode más seriamente [Vynka]
    - Por la del google code no nos van a dar nota. La que hay que actualizar es la del moodle.
    - OK, recordad poner quien pone cada comentario. De todas formas podemos usar la de
      google code como un borrador para luego subirlo bien hecho al moodle [Vynka]

? Aprender a usar el menu Task List del Eclipse para asi tener mejor clasificadas las tareas 
  a realizar y realizadas, pasando TODO.txt a ser una copia de seguridad de las mismas. [Haside]
    - Me parece bien. [Ale]
    - También se podría mirar la utilización de bugzilla. [Vynka]
    ^ En proceso. [Vynka]

- Visualizacion del problema (GUI): [Haside]
    -Arreglar el escalado en el DrawPanel.
    -Terminar el dialogo de propiedades con los elementos para elegir los parametros del problema. (Needs: Saber que parametros para Heuristica habra)
    -Hacer el dialogo de seleccion de fichero de rectangulos.
    -Hacer el panel con las etiquetas de los parametros a la derecha del dibujo. (Needs: Saber que parametros para Heuristica habra)
    -Etiquetas mostrando la fObj, Ideal, y los botones Solve, etc. debajo del dibujo. [Eferroja]

- Actualizar UML y javadoc [Vynka]
	> javadoc --help
  > umbrello heuristicas.xmi
	 

? Se podría mirar la posibilidad de que la clase heurística implemente runnable,
  para hacer más sencillo (y eficiente?) el multiarranque [Vynka]
  - Complica mas que hacer mas simple. [Haside]
  - Descartamos entonces? [Vynka]

- El rectangulo que devuelve Solution como solucion no coincide con los rectangulos colocados. [Eferroja]
  - Estoy comprobandolo [Ale]

? Hacer una clase Parameters para guardar los parametros del problema, que sea rellenado por el usuario en el menu de propiedades
y que sea recibido por Heuristica para que haga el metodo correspondiente. 

****************************************
* TODO YA RESUELTOS (MOVER AQUI ABAJO) *
****************************************
- TO [Eferroja]:
    El problema es que el rectangulo tiene asignada la posicion (0,0) y el
    panel tiene como posicion ~(0, 30). Cambia la posicion del rectangulo, o el translate.
    -Hecho, he puesto un offset de 33 para corregirlo, aunque no si si en otros monitores/resoluciones sirve ese offset, hay que comprobarlo. [Eferroja] 
	*El offset con panel.getLocation fracasa, se queda en 33. [Eferroja]
	
- Documentar modularizacion del metodo Heuristica.neighbour() [Ale]
  * DONE Comentada [Vynka]

? El metodo Heuristica.neighbour() es muy grande y eso lo hace ilegible. Se podria modularizar
  de alguna forma? [Ale]
  - Bajo mi punto de vista lo que lo hace ilegible no es que sea tan grande, sino mas bien la indentacion que tiene.
    Explico: Los Case estan mas indentados que el codigo que tienen asociado, y no hay espacio suficiente para leer
    el metodo de forma comoda. De todas formas se podria separar en varios metodos cada case. Me he tomado la libertad
    de indentarlos para ver que tal queda. Ya me diras. [Vynka]
  * DONE Modularizado [Ale]

- Comentar el metodo neighbour. [Ale]
  * DONE [Ale]

- Hay que meter los muestreos en la funcion neighbour (el que lo vaya a hacer y quiera saber
  por que se lo comento). [Haside]
  ? Te lo pregunto yo ma�ana ;) [Ale]
  * DONE [Ale]

- Documentar las funciones PRS, LS y RS [Ale]
  * DONE [Ale]
  
- Documentar el metodo multistartSearch [Ale]
  * DONE [Ale]

- Funciones de PRS, LS y RS. (Busquedas de entorno) [Haside]
	* DONE PRS y RS.
	* LS en proceso [Ale]
	DONE Ya esta terminado.


? Propongo almacenar en la clase Heuristica un atributo de clase "problem", igual que se hace
  con solution. Quedaria todo mas empaquetado y ordenado en lugar de copiar dos veces la misma
  informacion. El constructor de la clase Heuristica se encargaria de llamar a los constructores
  del problema y de la solucion. Recalco el "propongo" XD alomejor no es buena idea. [Ale]
    DONE Me esta pareciendo un co�azo porque tengo que hacer 32 get, set. Pero bueno asi se
      	 queda. [Haside]

- Decidir criterio para elegir que punto para localizar un rectangulo es mejor. [Anta]
    ? Menor area inutilizada? Es decir, la que genere el hueco mas pequeño, o que no
      genere ninguno. [Vynka]
    ? Menor numero de puntos ocultados segun la posicion que se escoja, si es igual comprobar la 
      menor area desperdiciada. [Ale]
    ? Menor area desperdiciada. Si es igual, pues en el primero que encuentre. [Haside]
    * DONE ya lo hice (mas bien modifique el codigo de Ale y Vynka) [Haside]

- Arreglar UML. [Ale]
  * DONE [Ale]

- Descripcion de la clase Heuristica. [Anta]
  * DONE [Haside]

- Ver como relacionar el vector de rectangulos con la clase. [Haside]
    ? Pasar una referencia a la clase Heuristica del vector de rectangulos de Problem y 
      almacenarlo como un atributo ("rectangulos") mas para tenerlos accesibles. Seria muy complejo pedir
      los rectangulos de uno en uno cuando hiciesen falta. [Ale]
    * DONE Ok, así mismo se queda. [Haside]


? Hacer la clase Heuristica interna en Problem [Anta]
    - Yo creo que es mejor al contrario, en todo caso Problem interno a Heuristica,
      aunque realmente un Problema y una Heuristica no van dados de la mano asi que
      el planteamiento actual estaria bien. [Haside]
    - Agree, aunque yo mas bien veo la Heuristica como un filtro que convierte el problema
      en la solucion que vamos a devolver. [Vynka]
    - Yo creo que es mejor mantenerlas separadas tb ^^ [Ale]
	* END Mayoria de separadas. Si eso se discute en otro momento. [Haside]


? Buscar algun modo de comunicarnos online mediante notas. [Haside]
    - Solucion provisional: http://rectanglepacking-ull.top-board.com A la espera de mejores
      propuestas [Vynka]
    * END Se deja asi, ya que te molestaste en hacerlo lo usamos, no merece la pena perder
           mas tiempo en ello. [Haside]

- Modo de comunicar la clase solucion con la heuristica de colocacion. Una 
  posibilidad, que esta clase contenga a la propia clase 'HeuristicaDeColocacion'
  Discutir como elaborar la clase Heuristica para saber donde meter el ArrayList<Point> [Haside].  
    ? (@ArrayList<Point>) En solution, seria quien tendria que mantener el control sobre esa lista.
      [Vynka]
    ? Pasarle un objeto solucion en el que deberia basarse para encontrar las soluciones vecinas. [Ale]
	
    * DONE Si nadie decide ni elige pues lo hago yo. Referencia de los rectangulos y 
           Puntos en la clase heuristica. La clase heuristica devuelve ya la Solucion final use el metodo que use.
           El problema no hará nada salvo guardar la solución y mostrarla. [Haside]
       

? Eliminar el vector pos de la clase Solution [Anta]
  * DONE Estaba puesto provisional. Si lo volvemos a necesitar lo ponemos. Asi intentamos mantener
    el codigo lo mas limpio posible. [Haside]

- Contemplar la posibilidad de tener el area de
  los rectangulos hallada previamente. (Una posible clase que contenga al
  vector de rectangulos con su constructor y el area que ocupan conjuntamente
  (caso optimo del problema)). [Haside]
    * DONE Clase Problem (ver areaRec). [Anta]
    
- ¿No deberia esta lista estar almacenada en la clase Solution? [Ale]
    * END La lista no va en la solucion porque son los puntos donde puede ir el SIGUIENTE rectangulo.
      En todo caso iria o ahi (en Problem) o en la clase Heuristica. [Haside]