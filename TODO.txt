*****************************************************************

* ARCHIVO TODO PARA TENER SEGUIMIENTO DE LOS CAMBIOS POR HACER. *
*****************************************************************
* Estilo:                                             			*
* - TODO en si. [Quien ha puesto la nota]                       *
* ? Sugerencia. [Quien ha puesto la nota]                       *
* Si se resuelve el TODO poner en la segunda seccion una nota   *
* de lo resuelto y el nombre de quien la resolvio.              *
* Asi si tenemos que contactar a alguien por algun problema     *
* sera mas llevadero.                                           *
* NO PONGAN TILDES. La codificacion difiere segun SO y 			*
* genera caracteres ilegibles									*
*																*
*  VERSION: XX.YY.ZZ										    *
*		XX =  Remodelacion completa. No creo que se cambie      *
*		YY =  Numero de heuristicas difetentes.					* 
*				(GRASP, Entorno...) 						    *
*		ZZ =  Subtipos de Heuristicas (Busqueda local, BAP...)	*
*															    *
*****************************************************************
	
- Visualizacion del problema (GUI): [Haside]
    -Hacer el panel con las etiquetas de los parametros a la derecha del dibujo.
    -Documentar decentemente el paquete de GUI, que lo tengo todo hecho un asco. [Eferroja]
  	-Mantener actualizado el dialogo de propiedades con los elementos para elegir los parametros del problema.
    	
- Actualizar UML [Vynka]
  > umbrello heuristicas.xmi

- Implementar busqueda tabu. [Eferroja]
  * COMENZADO [Ale]

- Implementar la busqueda constructiva GRASP con sus posibles variaciones [Haside]

- Implementar la busqueda por algoritmo genetico [Ale]

- Cambiar la seleccion de inicializacion por un Dialog que salte cuando se abre un archivo
  y cuando se pulsa el boton reset, de modo que las soluciones ya esten inicializadas. [Haside]
  
? Separar los muestreos de entorno a una clase nueva para evitar un fichero de 1000000 lineas xD [Ale]

? Podriamos separar cada tipo de busqueda en una clase, asi nos ahorrariamos lineas tb [Ale]

****************************************
* TODO YA RESUELTOS (MOVER AQUI ABAJO) *
****************************************

- Visualizacion del problema (GUI): [Haside]
    -Arreglar el escalado en el DrawPanel. Mejor hacer lo de los botones para escalar manualmente. [Haside]
    	*DONE. [Eferroja]
    -Terminar el dialogo de propiedades con los elementos para elegir los parametros del problema.
    	*DONE. [Eferroja]
    	-Mantenerlo actualizado.[Eferroja]
    -Hacer el dialogo de seleccion de fichero de rectangulos.
    	*DONE JFileChooser+copypaste FTW. [Eferroja]
    -Etiquetas mostrando la fObj, Ideal, y los botones Solve, etc. debajo del dibujo.
    	*DONE. [Eferroja]

- Implementar la busqueda por entornos numero 5, Recocido Simulado [Ale]
  - En proceso (Ya he empezado a trabajar en ello, aunque no lo subire hasta tenerlo
    correcto) [Vynka]
  - Tenemos que quedar para ver pq yo tb tengo hecho bastante. Podriamos mezclar ideas para dejarlo mejor.
    de momento subo lo que tengo hecho yo, lo ire arreglando estos dias pq no esta completo.
    NOTA: no es definitivo, es para si quieren mirarlo, opinar, o
    cambiarlo (Vynka sobre todo que tiene hecho parte) [Ale]
    *DONE version 1

- Comentar SimulatedAnnealing [Ale]
    *DONE

- Hacer una clase HeuristicOptions para guardar los parametros del problema, que sea rellenado
  por el usuario en el menu de propiedades y que sea recibido por Heuristica para que
  haga el metodo correspondiente. [Haside]
  - Implementacion de la clase HeuristicOptions [Haside]
  *DONE
  - Modificacion de la clase Heuristica [Ale]
  *Ya no hace falta por el ingenio del "callProcedure" ;)

- Hecho javadoc. Es tan facil como Project -> Generate Javadoc [Haside]

- El rectangulo que devuelve Solution como solucion no coincide con los rectangulos colocados.v2 [Haside]
	* DONE At last [Haside]

- Tratemos de no causar problemas con las indentaciones, se aceptan sugerencias de estilo- [Vynka]
  - De momento se me ocurren:
    * Espacios de 4 caracteres en blanco antes de cada linea(tabulador)
    * Seguir los estandares de Java
    * Lineas en blanco antes de bucles y/o sentencias de control:
      |    Linea_previa_al_bucle/sentencia_de_control;
      |
      |    for.../while.../if...
      ...
      |
      |    Siguiente_linea_de_codigo;
    * Comentarios explicativos si se estiman minimamente necesarios.
    [Vynka]
  - Traduzco: �Que les parece si volvemos a program I? [Haside]


- A�adidos Data sets segun tamano de problemas. [Haside]

- Ampliar la Wiki [Haside]
    ? Utilizar la wiki de googlecode más seriamente [Vynka]
    - Por la del google code no nos van a dar nota. La que hay que actualizar es la del moodle.
    - OK, recordad poner quien pone cada comentario. De todas formas podemos usar la de
      google code como un borrador para luego subirlo bien hecho al moodle [Vynka]

? Aprender a usar el menu Task List del Eclipse para asi tener mejor clasificadas las tareas 
  a realizar y realizadas, pasando TODO.txt a ser una copia de seguridad de las mismas. [Haside]
    - Me parece bien. [Ale]
    - También se podría mirar la utilización de bugzilla. [Vynka]
    * Se tarda tanto como en actualizar JAVADOC?
    ^ Espero haceros el tutorial (Task List) este mismo lunes en el foro. [Vynka]
    
       ^---- Esto no resuelve los problemas que hay. �Que te parece si dejas de tocarte los cojones y haces algo mas? 
       |---- Como mirar donde esta el problema del rectangulo, o testear (Eso que hice para ver que el error seguia ahi),
       |---- o buscar baterias (DONE), o hacer el GRASP, o hacer el Simulated Annealing, o comenzar la Memoria la toma de datos,
       |---- o ayudar a Isaac con la GUI o actualizar el javadoc (DONE) (se�or "Yo estoy con la documentacion y eso" @CC)
       |---- o actualizar el UML. Ah no espera, que estas empezando con el Recocido Simulado. 
       |---- Avise que si tenia que pasarme otro fin de semana haciendo cosas me cabreaba, lo cual no quiere decir que
       |---- no haberlo hecho, porque los otros trabajen, salve a alguien. Llevas 2 semanas para lo del bugzilla. Los unicos
       |---- cambios que has hecho son: meter y sacar cosas del TODO (sin hacer nada) y pintar la mona en el CC porque toca practica.
       |---- �Sabes que lo unico que pedi cuando me pegue todo el fin de semana haciendo toda la heuristica de colocacion
       |---- fue que se mirasen el codigo? Pues bastante claro quedo el mismito, sobre todo cuando tardaron un ratazo en el CC
       |---- en darse cuenta de su funcionamiento. Grande el asunto. 
       |---- �Sabes por que me toca las narices? Porque has tenido tiempo, cierto es que te paso lo de la practica de TALF
       |---- pero eso fue hace semanas, y si no dime, �que tal te lo pasaste en la playa? �Y cenando el viernes pasado?
       |---- �Y que tal los super foros esos en los que te metes entre horas en la 2.4? 
       |---- As� a modo de cultura general. �Sabes cuantos metodos has subido? "cero"                   [Happyde :D]
       |---- P.D: No me creo que te hayas pasado tanto estudiando el examen de algebra as que nada por tus "voy a estirar las piernas".

- TO [Eferroja]:
    El problema es que el rectangulo tiene asignada la posicion (0,0) y el
    panel tiene como posicion ~(0, 30). Cambia la posicion del rectangulo, o el translate.
    -Hecho, he puesto un offset de 33 para corregirlo, aunque no si si en otros monitores/resoluciones sirve ese offset, hay que comprobarlo. [Eferroja] 
	*El offset con panel.getLocation fracasa, se queda en 33. [Eferroja]
	
- Documentar modularizacion del metodo Heuristica.neighbour() [Ale]
  * DONE Comentada [Vynka]

? El metodo Heuristica.neighbour() es muy grande y eso lo hace ilegible. Se podria modularizar
  de alguna forma? [Ale]
  - Bajo mi punto de vista lo que lo hace ilegible no es que sea tan grande, sino mas bien la indentacion que tiene.
    Explico: Los Case estan mas indentados que el codigo que tienen asociado, y no hay espacio suficiente para leer
    el metodo de forma comoda. De todas formas se podria separar en varios metodos cada case. Me he tomado la libertad
    de indentarlos para ver que tal queda. Ya me diras. [Vynka]
  * DONE Modularizado [Ale]

- Comentar el metodo neighbour. [Ale]
  * DONE [Ale]

- Hay que meter los muestreos en la funcion neighbour (el que lo vaya a hacer y quiera saber
  por que se lo comento). [Haside]
  ? Te lo pregunto yo ma�ana ;) [Ale]
  * DONE [Ale]

- Documentar las funciones PRS, LS y RS [Ale]
  * DONE [Ale]
  
- Documentar el metodo multistartSearch [Ale]
  * DONE [Ale]

- Funciones de PRS, LS y RS. (Busquedas de entorno) [Haside]
	* DONE PRS y RS.
	* LS en proceso [Ale]
	DONE Ya esta terminado.


? Propongo almacenar en la clase Heuristica un atributo de clase "problem", igual que se hace
  con solution. Quedaria todo mas empaquetado y ordenado en lugar de copiar dos veces la misma
  informacion. El constructor de la clase Heuristica se encargaria de llamar a los constructores
  del problema y de la solucion. Recalco el "propongo" XD alomejor no es buena idea. [Ale]
    DONE Me esta pareciendo un co�azo porque tengo que hacer 32 get, set. Pero bueno asi se
      	 queda. [Haside]

- Decidir criterio para elegir que punto para localizar un rectangulo es mejor. [Anta]
    ? Menor area inutilizada? Es decir, la que genere el hueco mas pequeño, o que no
      genere ninguno. [Vynka]
    ? Menor numero de puntos ocultados segun la posicion que se escoja, si es igual comprobar la 
      menor area desperdiciada. [Ale]
    ? Menor area desperdiciada. Si es igual, pues en el primero que encuentre. [Haside]
    * DONE ya lo hice (mas bien modifique el codigo de Ale y Vynka) [Haside]

- Arreglar UML. [Ale]
  * DONE [Ale]

- Descripcion de la clase Heuristica. [Anta]
  * DONE [Haside]

- Ver como relacionar el vector de rectangulos con la clase. [Haside]
    ? Pasar una referencia a la clase Heuristica del vector de rectangulos de Problem y 
      almacenarlo como un atributo ("rectangulos") mas para tenerlos accesibles. Seria muy complejo pedir
      los rectangulos de uno en uno cuando hiciesen falta. [Ale]
    * DONE Ok, así mismo se queda. [Haside]


? Hacer la clase Heuristica interna en Problem [Anta]
    - Yo creo que es mejor al contrario, en todo caso Problem interno a Heuristica,
      aunque realmente un Problema y una Heuristica no van dados de la mano asi que
      el planteamiento actual estaria bien. [Haside]
    - Agree, aunque yo mas bien veo la Heuristica como un filtro que convierte el problema
      en la solucion que vamos a devolver. [Vynka]
    - Yo creo que es mejor mantenerlas separadas tb ^^ [Ale]
	* END Mayoria de separadas. Si eso se discute en otro momento. [Haside]


? Buscar algun modo de comunicarnos online mediante notas. [Haside]
    - Solucion provisional: http://rectanglepacking-ull.top-board.com A la espera de mejores
      propuestas [Vynka]
    * END Se deja asi, ya que te molestaste en hacerlo lo usamos, no merece la pena perder
           mas tiempo en ello. [Haside]

- Modo de comunicar la clase solucion con la heuristica de colocacion. Una 
  posibilidad, que esta clase contenga a la propia clase 'HeuristicaDeColocacion'
  Discutir como elaborar la clase Heuristica para saber donde meter el ArrayList<Point> [Haside].  
    ? (@ArrayList<Point>) En solution, seria quien tendria que mantener el control sobre esa lista.
      [Vynka]
    ? Pasarle un objeto solucion en el que deberia basarse para encontrar las soluciones vecinas. [Ale]
	
    * DONE Si nadie decide ni elige pues lo hago yo. Referencia de los rectangulos y 
           Puntos en la clase heuristica. La clase heuristica devuelve ya la Solucion final use el metodo que use.
           El problema no hará nada salvo guardar la solución y mostrarla. [Haside]
       

? Eliminar el vector pos de la clase Solution [Anta]
  * DONE Estaba puesto provisional. Si lo volvemos a necesitar lo ponemos. Asi intentamos mantener
    el codigo lo mas limpio posible. [Haside]

- Contemplar la posibilidad de tener el area de
  los rectangulos hallada previamente. (Una posible clase que contenga al
  vector de rectangulos con su constructor y el area que ocupan conjuntamente
  (caso optimo del problema)). [Haside]
    * DONE Clase Problem (ver areaRec). [Anta]
    
- ¿No deberia esta lista estar almacenada en la clase Solution? [Ale]
    * END La lista no va en la solucion porque son los puntos donde puede ir el SIGUIENTE rectangulo.
      En todo caso iria o ahi (en Problem) o en la clase Heuristica. [Haside]